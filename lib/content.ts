// Centralized content management for OBUMBRAVIT Terminal
// This ensures consistency across all generated content

export interface ProfileData {
  name: string
  title: string
  experience: string
  email: string
  github: string
  linkedin: string
  twitter: string
  currentRole: string
  availability: string
}

export const PROFILE_DATA: ProfileData = {
  name: 'OBUMBRAVIT',
  title: 'Full-Stack Developer & iOS Specialist',
  experience: '6+ Years',
  email: 'hello@obumbravit.com',
  github: 'github.com/obumbravit',
  linkedin: 'linkedin.com/in/obumbravit',
  twitter: '@obumbravit',
  currentRole: 'Employed Full-Stack Developer',
  availability: 'Limited (Currently employed)'
}

export interface TechStack {
  ios: string[]
  web: string[]
  desktop: string[]
  databases: string[]
  tools: string[]
}

export const TECH_STACK: TechStack = {
  ios: ['Swift', 'SwiftUI', 'Objective-C', 'UIKit'],
  web: ['React', 'Next.js', 'TypeScript', 'JavaScript', 'HTML5', 'CSS3'],
  desktop: ['Various frameworks and languages'],
  databases: ['PostgreSQL', 'MongoDB', 'SQLite'],
  tools: ['Git', 'Docker', 'Xcode', 'VS Code']
}

export interface Skills {
  ios: number
  web: number
  desktop: number
  uiux: number
  api: number
  database: number
  performance: number
  architecture: number
}

export const SKILLS: Skills = {
  ios: 0,
  web: 0,
  desktop: 0,
  uiux: 0,
  api: 0,
  database: 0,
  performance: 0,
  architecture: 0
}

export interface Services {
  ios: string
  web: string
  desktop: string
  uiux: string
  api: string
  architecture: string
  performance: string
}

export const SERVICES: Services = {
  ios: 'iOS Development (Swift/SwiftUI)',
  web: 'Full-Stack Web Development',
  desktop: 'Desktop Application Development',
  uiux: 'Modern UI/UX Design',
  api: 'API Development & Integration',
  architecture: 'System Architecture',
  performance: 'Performance Optimization'
}

export const SYSTEM_INFO = {
  version: 'v2.1.0',
  name: 'OBUMBRAVIT_OS',
  terminal: 'OBUMBRAVIT_TERMINAL'
}

export const BOOT_MESSAGES = [
  'Initializing system...',
  'Loading kernel modules...',
  'Mounting filesystems...',
  'Starting network services...',
  'Loading development environment...',
  'Initializing iOS development tools...',
  'Starting web development stack...',
  'Loading desktop development tools...',
  'Establishing GitHub integration...'
]

export const FOOTER_TEXT = '*Generated by OBUMBRAVIT_TERMINAL*'

// Utility functions for consistent content generation
export const formatDate = (date: Date = new Date()) => date.toISOString()
export const formatUptime = () => Math.floor(Date.now() / 1000)
export const formatSkills = (skills: Skills) => 
  Object.entries(skills).map(([skill, level]) => `- **${skill.charAt(0).toUpperCase() + skill.slice(1)}**: ${level}%`).join('\n')

export const formatTechStack = (stack: TechStack) => {
  return Object.entries(stack).map(([category, techs]) => 
    `- **${category.charAt(0).toUpperCase() + category.slice(1)}**: ${techs.join(', ')}`
  ).join('\n')
}

export const formatServices = (services: Services) => 
  Object.values(services).map(service => `- ${service}`).join('\n')

// GitHub-based statistics calculation
export interface GitHubStats {
  totalRepos: number
  totalStars: number
  totalForks: number
  totalCommits: number
  languages: Record<string, number>
  topLanguages: Array<{ language: string; percentage: number; lines: number }>
  skills: Skills
  experience: number
  lastCommit: string
  mostActiveRepo: string
}

export function calculateGitHubStats(repos: any[]): GitHubStats {
  const languages: Record<string, number> = {}
  let totalStars = 0
  let totalForks = 0
  let totalCommits = 0
  let mostActiveRepo = ''
  let maxStars = 0
  
  // Calculate totals and language usage
  repos.forEach(repo => {
    totalStars += repo.stargazers_count || 0
    totalForks += repo.forks_count || 0
    
    if (repo.language) {
      languages[repo.language] = (languages[repo.language] || 0) + 1
    }
    
    if ((repo.stargazers_count || 0) > maxStars) {
      maxStars = repo.stargazers_count || 0
      mostActiveRepo = repo.name
    }
  })
  
  // Calculate language percentages based on actual repository count
  const totalRepos = repos.length
  const topLanguages = Object.entries(languages)
    .map(([language, count]) => ({
      language,
      percentage: Math.round((count / totalRepos) * 100),
      lines: count * 1000 // Simple estimate: 1000 lines per repo using this language
    }))
    .sort((a, b) => b.percentage - a.percentage)
    .slice(0, 10)
  
  // Calculate skills based purely on language usage (no hardcoded bonuses)
  const skills: Skills = {
    ios: calculateSkillLevel(languages, ['Swift', 'Objective-C']),
    web: calculateSkillLevel(languages, ['JavaScript', 'TypeScript', 'HTML', 'CSS']),
    desktop: calculateSkillLevel(languages, ['C++', 'C#', 'Java', 'Python']),
    uiux: calculateSkillLevel(languages, ['CSS', 'SCSS', 'HTML']),
    api: calculateSkillLevel(languages, ['JavaScript', 'TypeScript', 'Python', 'Java']),
    database: calculateSkillLevel(languages, ['SQL', 'Python']),
    performance: calculateSkillLevel(languages, ['C++', 'Rust', 'Go']),
    architecture: calculateSkillLevel(languages, ['TypeScript', 'Java', 'Python', 'C++'])
  }
  
  // Calculate experience based on repository count (more conservative)
  const experience = Math.max(1, Math.floor(totalRepos / 3)) // 1 year per 3 repos
  
  return {
    totalRepos,
    totalStars,
    totalForks,
    totalCommits,
    languages,
    topLanguages,
    skills,
    experience,
    lastCommit: new Date().toISOString(),
    mostActiveRepo
  }
}

function calculateSkillLevel(languages: Record<string, number>, relevantLanguages: string[]): number {
  let totalRelevant = 0
  let totalAll = 0
  
  Object.entries(languages).forEach(([language, count]) => {
    totalAll += count
    if (relevantLanguages.some(lang => 
      language.toLowerCase().includes(lang.toLowerCase())
    )) {
      totalRelevant += count
    }
  })
  
  if (totalAll === 0) return 0 // No data means no skill level
  
  const percentage = (totalRelevant / totalAll) * 100
  return Math.round(percentage) // Pure percentage, no artificial bonuses
}
